/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface GaugeproxyInterface extends utils.Interface {
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'DISTRIBUTION_MANAGER()': FunctionFragment;
    'MASTER()': FunctionFragment;
    'PROTO()': FunctionFragment;
    'TOKEN()': FunctionFragment;
    'acceptGovernance()': FunctionFragment;
    'addGauge(address)': FunctionFragment;
    'bribeWhitelist()': FunctionFragment;
    'bribefactory()': FunctionFragment;
    'bribes(address)': FunctionFragment;
    'bribesEnabled()': FunctionFragment;
    'claimBribes(address[],address)': FunctionFragment;
    'collect()': FunctionFragment;
    'deposit()': FunctionFragment;
    'depositFeeRate()': FunctionFragment;
    'distribute()': FunctionFragment;
    'gauges(address)': FunctionFragment;
    'getDepositFeeRate()': FunctionFragment;
    'getGauge(address)': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'getRoleMember(bytes32,uint256)': FunctionFragment;
    'getRoleMemberCount(bytes32)': FunctionFragment;
    'getTreasury()': FunctionFragment;
    'governance()': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'isDistributeOpen()': FunctionFragment;
    'isWhitelisted(address)': FunctionFragment;
    'length()': FunctionFragment;
    'pendingGovernance()': FunctionFragment;
    'pid()': FunctionFragment;
    'poke(address)': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'reset()': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'setGovernance(address)': FunctionFragment;
    'setPID(uint256)': FunctionFragment;
    'tokenVote(address,uint256)': FunctionFragment;
    'tokens()': FunctionFragment;
    'totalWeight()': FunctionFragment;
    'treasury()': FunctionFragment;
    'updateBribeWhitelist(address)': FunctionFragment;
    'updateBribesEnabled(bool)': FunctionFragment;
    'updateDepositFeeRate(uint256)': FunctionFragment;
    'updateIsDistributeOpen(bool)': FunctionFragment;
    'updateTreasury(address)': FunctionFragment;
    'usedWeights(address)': FunctionFragment;
    'veELCT()': FunctionFragment;
    'vote(address[],uint256[])': FunctionFragment;
    'votes(address,address)': FunctionFragment;
    'weights(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DEFAULT_ADMIN_ROLE'
      | 'DISTRIBUTION_MANAGER'
      | 'MASTER'
      | 'PROTO'
      | 'TOKEN'
      | 'acceptGovernance'
      | 'addGauge'
      | 'bribeWhitelist'
      | 'bribefactory'
      | 'bribes'
      | 'bribesEnabled'
      | 'claimBribes'
      | 'collect'
      | 'deposit'
      | 'depositFeeRate'
      | 'distribute'
      | 'gauges'
      | 'getDepositFeeRate'
      | 'getGauge'
      | 'getRoleAdmin'
      | 'getRoleMember'
      | 'getRoleMemberCount'
      | 'getTreasury'
      | 'governance'
      | 'grantRole'
      | 'hasRole'
      | 'isDistributeOpen'
      | 'isWhitelisted'
      | 'length'
      | 'pendingGovernance'
      | 'pid'
      | 'poke'
      | 'renounceRole'
      | 'reset'
      | 'revokeRole'
      | 'setGovernance'
      | 'setPID'
      | 'tokenVote'
      | 'tokens'
      | 'totalWeight'
      | 'treasury'
      | 'updateBribeWhitelist'
      | 'updateBribesEnabled'
      | 'updateDepositFeeRate'
      | 'updateIsDistributeOpen'
      | 'updateTreasury'
      | 'usedWeights'
      | 'veELCT'
      | 'vote'
      | 'votes'
      | 'weights',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DISTRIBUTION_MANAGER', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MASTER', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PROTO', values?: undefined): string;
  encodeFunctionData(functionFragment: 'TOKEN', values?: undefined): string;
  encodeFunctionData(functionFragment: 'acceptGovernance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addGauge', values: [string]): string;
  encodeFunctionData(functionFragment: 'bribeWhitelist', values?: undefined): string;
  encodeFunctionData(functionFragment: 'bribefactory', values?: undefined): string;
  encodeFunctionData(functionFragment: 'bribes', values: [string]): string;
  encodeFunctionData(functionFragment: 'bribesEnabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claimBribes', values: [string[], string]): string;
  encodeFunctionData(functionFragment: 'collect', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deposit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'depositFeeRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'distribute', values?: undefined): string;
  encodeFunctionData(functionFragment: 'gauges', values: [string]): string;
  encodeFunctionData(functionFragment: 'getDepositFeeRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getGauge', values: [string]): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'getRoleMember', values: [BytesLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getRoleMemberCount', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'getTreasury', values?: undefined): string;
  encodeFunctionData(functionFragment: 'governance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'isDistributeOpen', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isWhitelisted', values: [string]): string;
  encodeFunctionData(functionFragment: 'length', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingGovernance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pid', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poke', values: [string]): string;
  encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'reset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'setGovernance', values: [string]): string;
  encodeFunctionData(functionFragment: 'setPID', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'tokenVote', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'tokens', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalWeight', values?: undefined): string;
  encodeFunctionData(functionFragment: 'treasury', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updateBribeWhitelist', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateBribesEnabled', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'updateDepositFeeRate', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateIsDistributeOpen', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'updateTreasury', values: [string]): string;
  encodeFunctionData(functionFragment: 'usedWeights', values: [string]): string;
  encodeFunctionData(functionFragment: 'veELCT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vote', values: [string[], BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'votes', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'weights', values: [string]): string;

  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DISTRIBUTION_MANAGER', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MASTER', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PROTO', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'TOKEN', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addGauge', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bribeWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bribefactory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bribes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bribesEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimBribes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collect', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositFeeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distribute', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gauges', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDepositFeeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getGauge', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleMember', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleMemberCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTreasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'governance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isDistributeOpen', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isWhitelisted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'length', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poke', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPID', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenVote', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalWeight', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateBribeWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateBribesEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateDepositFeeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateIsDistributeOpen', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateTreasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'usedWeights', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'veELCT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vote', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'votes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'weights', data: BytesLike): Result;

  events: {
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
}

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface Gaugeproxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GaugeproxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DISTRIBUTION_MANAGER(overrides?: CallOverrides): Promise<[string]>;

    MASTER(overrides?: CallOverrides): Promise<[string]>;

    PROTO(overrides?: CallOverrides): Promise<[string]>;

    TOKEN(overrides?: CallOverrides): Promise<[string]>;

    acceptGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    addGauge(_token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    bribeWhitelist(overrides?: CallOverrides): Promise<[string]>;

    bribefactory(overrides?: CallOverrides): Promise<[string]>;

    bribes(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    bribesEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    claimBribes(
      _bribes: string[],
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    collect(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    deposit(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    depositFeeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    distribute(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    gauges(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    getDepositFeeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getGauge(_token: string, overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTreasury(overrides?: CallOverrides): Promise<[string]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>;

    isDistributeOpen(overrides?: CallOverrides): Promise<[boolean]>;

    isWhitelisted(token: string, overrides?: CallOverrides): Promise<[boolean]>;

    length(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingGovernance(overrides?: CallOverrides): Promise<[string]>;

    pid(overrides?: CallOverrides): Promise<[BigNumber]>;

    poke(_owner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    reset(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPID(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    tokenVote(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    tokens(overrides?: CallOverrides): Promise<[string[]]>;

    totalWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    updateBribeWhitelist(
      _bribeWhitelist: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateBribesEnabled(
      _bribesEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateDepositFeeRate(
      _depositFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateIsDistributeOpen(
      _isOpen: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    usedWeights(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    veELCT(overrides?: CallOverrides): Promise<[string]>;

    vote(
      _tokenVote: string[],
      _weights: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    votes(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    weights(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DISTRIBUTION_MANAGER(overrides?: CallOverrides): Promise<string>;

  MASTER(overrides?: CallOverrides): Promise<string>;

  PROTO(overrides?: CallOverrides): Promise<string>;

  TOKEN(overrides?: CallOverrides): Promise<string>;

  acceptGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  addGauge(_token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  bribeWhitelist(overrides?: CallOverrides): Promise<string>;

  bribefactory(overrides?: CallOverrides): Promise<string>;

  bribes(arg0: string, overrides?: CallOverrides): Promise<string>;

  bribesEnabled(overrides?: CallOverrides): Promise<boolean>;

  claimBribes(
    _bribes: string[],
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  collect(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  deposit(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  depositFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  distribute(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  gauges(arg0: string, overrides?: CallOverrides): Promise<string>;

  getDepositFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  getGauge(_token: string, overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  getTreasury(overrides?: CallOverrides): Promise<string>;

  governance(overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

  isDistributeOpen(overrides?: CallOverrides): Promise<boolean>;

  isWhitelisted(token: string, overrides?: CallOverrides): Promise<boolean>;

  length(overrides?: CallOverrides): Promise<BigNumber>;

  pendingGovernance(overrides?: CallOverrides): Promise<string>;

  pid(overrides?: CallOverrides): Promise<BigNumber>;

  poke(_owner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  reset(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPID(_pid: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  tokenVote(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<string>;

  tokens(overrides?: CallOverrides): Promise<string[]>;

  totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

  treasury(overrides?: CallOverrides): Promise<string>;

  updateBribeWhitelist(
    _bribeWhitelist: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateBribesEnabled(
    _bribesEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateDepositFeeRate(
    _depositFeeRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateIsDistributeOpen(
    _isOpen: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateTreasury(
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  usedWeights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  veELCT(overrides?: CallOverrides): Promise<string>;

  vote(
    _tokenVote: string[],
    _weights: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  votes(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  weights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DISTRIBUTION_MANAGER(overrides?: CallOverrides): Promise<string>;

    MASTER(overrides?: CallOverrides): Promise<string>;

    PROTO(overrides?: CallOverrides): Promise<string>;

    TOKEN(overrides?: CallOverrides): Promise<string>;

    acceptGovernance(overrides?: CallOverrides): Promise<void>;

    addGauge(_token: string, overrides?: CallOverrides): Promise<string>;

    bribeWhitelist(overrides?: CallOverrides): Promise<string>;

    bribefactory(overrides?: CallOverrides): Promise<string>;

    bribes(arg0: string, overrides?: CallOverrides): Promise<string>;

    bribesEnabled(overrides?: CallOverrides): Promise<boolean>;

    claimBribes(_bribes: string[], user: string, overrides?: CallOverrides): Promise<void>;

    collect(overrides?: CallOverrides): Promise<void>;

    deposit(overrides?: CallOverrides): Promise<void>;

    depositFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    distribute(overrides?: CallOverrides): Promise<void>;

    gauges(arg0: string, overrides?: CallOverrides): Promise<string>;

    getDepositFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    getGauge(_token: string, overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getTreasury(overrides?: CallOverrides): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    grantRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

    isDistributeOpen(overrides?: CallOverrides): Promise<boolean>;

    isWhitelisted(token: string, overrides?: CallOverrides): Promise<boolean>;

    length(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernance(overrides?: CallOverrides): Promise<string>;

    pid(overrides?: CallOverrides): Promise<BigNumber>;

    poke(_owner: string, overrides?: CallOverrides): Promise<void>;

    renounceRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    reset(overrides?: CallOverrides): Promise<void>;

    revokeRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    setGovernance(_governance: string, overrides?: CallOverrides): Promise<void>;

    setPID(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    tokenVote(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<string>;

    tokens(overrides?: CallOverrides): Promise<string[]>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<string>;

    updateBribeWhitelist(_bribeWhitelist: string, overrides?: CallOverrides): Promise<void>;

    updateBribesEnabled(_bribesEnabled: boolean, overrides?: CallOverrides): Promise<void>;

    updateDepositFeeRate(_depositFeeRate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateIsDistributeOpen(_isOpen: boolean, overrides?: CallOverrides): Promise<void>;

    updateTreasury(_treasury: string, overrides?: CallOverrides): Promise<void>;

    usedWeights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    veELCT(overrides?: CallOverrides): Promise<string>;

    vote(_tokenVote: string[], _weights: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    votes(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    weights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter;
    RoleGranted(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleRevokedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DISTRIBUTION_MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    MASTER(overrides?: CallOverrides): Promise<BigNumber>;

    PROTO(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    acceptGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    addGauge(_token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    bribeWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    bribefactory(overrides?: CallOverrides): Promise<BigNumber>;

    bribes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bribesEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    claimBribes(
      _bribes: string[],
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    collect(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    deposit(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    depositFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    distribute(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    gauges(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDepositFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    getGauge(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isDistributeOpen(overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelisted(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    length(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    pid(overrides?: CallOverrides): Promise<BigNumber>;

    poke(_owner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    reset(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setGovernance(_governance: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setPID(_pid: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    tokenVote(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    tokens(overrides?: CallOverrides): Promise<BigNumber>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    updateBribeWhitelist(
      _bribeWhitelist: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateBribesEnabled(
      _bribesEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateDepositFeeRate(
      _depositFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateIsDistributeOpen(
      _isOpen: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateTreasury(_treasury: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    usedWeights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    veELCT(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _tokenVote: string[],
      _weights: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    votes(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    weights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DISTRIBUTION_MANAGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MASTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROTO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    addGauge(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    bribeWhitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bribefactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bribes(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bribesEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimBribes(
      _bribes: string[],
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    collect(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    deposit(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    depositFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distribute(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    gauges(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepositFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGauge(_token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDistributeOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWhitelisted(token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    length(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poke(_owner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    reset(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPID(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    tokenVote(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateBribeWhitelist(
      _bribeWhitelist: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateBribesEnabled(
      _bribesEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateDepositFeeRate(
      _depositFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateIsDistributeOpen(
      _isOpen: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    usedWeights(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    veELCT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote(
      _tokenVote: string[],
      _weights: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    votes(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weights(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
