/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface MasterchefV1Interface extends utils.Interface {
  functions: {
    'BONUS_MULTIPLIER()': FunctionFragment;
    'BURN_ADDRESS()': FunctionFragment;
    'MAXIMUM_DEPOSIT_FEES()': FunctionFragment;
    'MAXIMUM_HARVEST_INTERVAL()': FunctionFragment;
    'MAXIMUM_NFTPOOL_MINT_BP()': FunctionFragment;
    'add(uint256,address,uint16,uint256,bool)': FunctionFragment;
    'canHarvest(uint256,address)': FunctionFragment;
    'deposit(uint256,uint256)': FunctionFragment;
    'devAddress()': FunctionFragment;
    'electron()': FunctionFragment;
    'emergencyWithdraw(uint256)': FunctionFragment;
    'feeAddress()': FunctionFragment;
    'getMultiplier(uint256,uint256)': FunctionFragment;
    'getPoolInfo(uint256)': FunctionFragment;
    'massUpdatePools()': FunctionFragment;
    'nftPoolFeeBP()': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingProton(uint256,address)': FunctionFragment;
    'poolAddress()': FunctionFragment;
    'poolInfo(uint256)': FunctionFragment;
    'poolLength()': FunctionFragment;
    'proton()': FunctionFragment;
    'protonPerBlock()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'set(uint256,uint256,uint16,uint256,bool)': FunctionFragment;
    'setDevAddress(address)': FunctionFragment;
    'setFeeAddress(address)': FunctionFragment;
    'setPoolAddress(address)': FunctionFragment;
    'startBlock()': FunctionFragment;
    'totalAllocPoint()': FunctionFragment;
    'totalLockedUpRewards()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateEmissionRate(uint256)': FunctionFragment;
    'updateNftPoolFeeBP(uint16)': FunctionFragment;
    'updatePool(uint256)': FunctionFragment;
    'userInfo(uint256,address)': FunctionFragment;
    'withdraw(uint256,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BONUS_MULTIPLIER'
      | 'BURN_ADDRESS'
      | 'MAXIMUM_DEPOSIT_FEES'
      | 'MAXIMUM_HARVEST_INTERVAL'
      | 'MAXIMUM_NFTPOOL_MINT_BP'
      | 'add'
      | 'canHarvest'
      | 'deposit'
      | 'devAddress'
      | 'electron'
      | 'emergencyWithdraw'
      | 'feeAddress'
      | 'getMultiplier'
      | 'getPoolInfo'
      | 'massUpdatePools'
      | 'nftPoolFeeBP'
      | 'owner'
      | 'pendingProton'
      | 'poolAddress'
      | 'poolInfo'
      | 'poolLength'
      | 'proton'
      | 'protonPerBlock'
      | 'renounceOwnership'
      | 'set'
      | 'setDevAddress'
      | 'setFeeAddress'
      | 'setPoolAddress'
      | 'startBlock'
      | 'totalAllocPoint'
      | 'totalLockedUpRewards'
      | 'transferOwnership'
      | 'updateEmissionRate'
      | 'updateNftPoolFeeBP'
      | 'updatePool'
      | 'userInfo'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BONUS_MULTIPLIER', values?: undefined): string;
  encodeFunctionData(functionFragment: 'BURN_ADDRESS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAXIMUM_DEPOSIT_FEES', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAXIMUM_HARVEST_INTERVAL', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAXIMUM_NFTPOOL_MINT_BP', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'add',
    values: [BigNumberish, string, BigNumberish, BigNumberish, boolean],
  ): string;
  encodeFunctionData(functionFragment: 'canHarvest', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'devAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'electron', values?: undefined): string;
  encodeFunctionData(functionFragment: 'emergencyWithdraw', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'feeAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMultiplier', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getPoolInfo', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'massUpdatePools', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nftPoolFeeBP', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingProton', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'poolAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolInfo', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'poolLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'proton', values?: undefined): string;
  encodeFunctionData(functionFragment: 'protonPerBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'set',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean],
  ): string;
  encodeFunctionData(functionFragment: 'setDevAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'setFeeAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'setPoolAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'startBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalAllocPoint', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalLockedUpRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateEmissionRate', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateNftPoolFeeBP', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updatePool', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'userInfo', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish, BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'BONUS_MULTIPLIER', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'BURN_ADDRESS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAXIMUM_DEPOSIT_FEES', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAXIMUM_HARVEST_INTERVAL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAXIMUM_NFTPOOL_MINT_BP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'add', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'canHarvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'devAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'electron', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMultiplier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'massUpdatePools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nftPoolFeeBP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingProton', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proton', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'protonPerBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDevAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPoolAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAllocPoint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalLockedUpRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateEmissionRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateNftPoolFeeBP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Deposit(address,uint256,uint256)': EventFragment;
    'EmergencyWithdraw(address,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'RewardLockedUp(address,uint256,uint256)': EventFragment;
    'UpdateEmissionRate(address,uint256)': EventFragment;
    'UpdatedDevAddress(address,address)': EventFragment;
    'UpdatedFeeAddress(address,address)': EventFragment;
    'UpdatedNftPoolFeeBP(uint16)': EventFragment;
    'UpdatedPoolAddress(address)': EventFragment;
    'Withdraw(address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardLockedUp'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateEmissionRate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdatedDevAddress'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdatedFeeAddress'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdatedNftPoolFeeBP'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdatedPoolAddress'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface DepositEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EmergencyWithdrawEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], EmergencyWithdrawEventObject>;

export type EmergencyWithdrawEventFilter = TypedEventFilter<EmergencyWithdrawEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RewardLockedUpEventObject {
  user: string;
  pid: BigNumber;
  amountLockedUp: BigNumber;
}
export type RewardLockedUpEvent = TypedEvent<[string, BigNumber, BigNumber], RewardLockedUpEventObject>;

export type RewardLockedUpEventFilter = TypedEventFilter<RewardLockedUpEvent>;

export interface UpdateEmissionRateEventObject {
  user: string;
  protonPerBlock: BigNumber;
}
export type UpdateEmissionRateEvent = TypedEvent<[string, BigNumber], UpdateEmissionRateEventObject>;

export type UpdateEmissionRateEventFilter = TypedEventFilter<UpdateEmissionRateEvent>;

export interface UpdatedDevAddressEventObject {
  previousDevAddress: string;
  newDevAddress: string;
}
export type UpdatedDevAddressEvent = TypedEvent<[string, string], UpdatedDevAddressEventObject>;

export type UpdatedDevAddressEventFilter = TypedEventFilter<UpdatedDevAddressEvent>;

export interface UpdatedFeeAddressEventObject {
  previousFeeAddress: string;
  newFeeAddress: string;
}
export type UpdatedFeeAddressEvent = TypedEvent<[string, string], UpdatedFeeAddressEventObject>;

export type UpdatedFeeAddressEventFilter = TypedEventFilter<UpdatedFeeAddressEvent>;

export interface UpdatedNftPoolFeeBPEventObject {
  nftPoolFeeBP: number;
}
export type UpdatedNftPoolFeeBPEvent = TypedEvent<[number], UpdatedNftPoolFeeBPEventObject>;

export type UpdatedNftPoolFeeBPEventFilter = TypedEventFilter<UpdatedNftPoolFeeBPEvent>;

export interface UpdatedPoolAddressEventObject {
  newPoolAddress: string;
}
export type UpdatedPoolAddressEvent = TypedEvent<[string], UpdatedPoolAddressEventObject>;

export type UpdatedPoolAddressEventFilter = TypedEventFilter<UpdatedPoolAddressEvent>;

export interface WithdrawEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface MasterchefV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MasterchefV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BONUS_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    BURN_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    MAXIMUM_DEPOSIT_FEES(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAXIMUM_HARVEST_INTERVAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAXIMUM_NFTPOOL_MINT_BP(overrides?: CallOverrides): Promise<[BigNumber]>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _isElectronRewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    canHarvest(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<[boolean]>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    devAddress(overrides?: CallOverrides): Promise<[string]>;

    electron(overrides?: CallOverrides): Promise<[string]>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    feeAddress(overrides?: CallOverrides): Promise<[string]>;

    getMultiplier(_from: BigNumberish, _to: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoolInfo(
      _pid: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accProtonPerShare: BigNumber;
        depositFeeBP: BigNumber;
        harvestInterval: BigNumber;
        isElectronRewards: boolean;
      }
    >;

    massUpdatePools(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    nftPoolFeeBP(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingProton(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    poolAddress(overrides?: CallOverrides): Promise<[string]>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber, boolean] & {
        lpToken: string;
        lpSupply: BigNumber;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accProtonPerShare: BigNumber;
        depositFeeBP: number;
        harvestInterval: BigNumber;
        isElectronRewards: boolean;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    proton(overrides?: CallOverrides): Promise<[string]>;

    protonPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _isElectronRewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setDevAddress(
      _devAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setFeeAddress(
      _feeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPoolAddress(
      _poolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalLockedUpRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateEmissionRate(
      _protonPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateNftPoolFeeBP(
      _nftPoolFeeBP: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewardLockedUp: BigNumber;
        nextHarvestUntil: BigNumber;
      }
    >;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  BONUS_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  BURN_ADDRESS(overrides?: CallOverrides): Promise<string>;

  MAXIMUM_DEPOSIT_FEES(overrides?: CallOverrides): Promise<BigNumber>;

  MAXIMUM_HARVEST_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

  MAXIMUM_NFTPOOL_MINT_BP(overrides?: CallOverrides): Promise<BigNumber>;

  add(
    _allocPoint: BigNumberish,
    _lpToken: string,
    _depositFeeBP: BigNumberish,
    _harvestInterval: BigNumberish,
    _isElectronRewards: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  canHarvest(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<boolean>;

  deposit(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  devAddress(overrides?: CallOverrides): Promise<string>;

  electron(overrides?: CallOverrides): Promise<string>;

  emergencyWithdraw(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  feeAddress(overrides?: CallOverrides): Promise<string>;

  getMultiplier(_from: BigNumberish, _to: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getPoolInfo(
    _pid: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      lpToken: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accProtonPerShare: BigNumber;
      depositFeeBP: BigNumber;
      harvestInterval: BigNumber;
      isElectronRewards: boolean;
    }
  >;

  massUpdatePools(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  nftPoolFeeBP(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingProton(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<BigNumber>;

  poolAddress(overrides?: CallOverrides): Promise<string>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber, boolean] & {
      lpToken: string;
      lpSupply: BigNumber;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accProtonPerShare: BigNumber;
      depositFeeBP: number;
      harvestInterval: BigNumber;
      isElectronRewards: boolean;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  proton(overrides?: CallOverrides): Promise<string>;

  protonPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  set(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _depositFeeBP: BigNumberish,
    _harvestInterval: BigNumberish,
    _isElectronRewards: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setDevAddress(
    _devAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setFeeAddress(
    _feeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPoolAddress(
    _poolAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  totalLockedUpRewards(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateEmissionRate(
    _protonPerBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateNftPoolFeeBP(
    _nftPoolFeeBP: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updatePool(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      rewardLockedUp: BigNumber;
      nextHarvestUntil: BigNumber;
    }
  >;

  withdraw(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    BONUS_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    BURN_ADDRESS(overrides?: CallOverrides): Promise<string>;

    MAXIMUM_DEPOSIT_FEES(overrides?: CallOverrides): Promise<BigNumber>;

    MAXIMUM_HARVEST_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    MAXIMUM_NFTPOOL_MINT_BP(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _isElectronRewards: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    canHarvest(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<boolean>;

    deposit(_pid: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    devAddress(overrides?: CallOverrides): Promise<string>;

    electron(overrides?: CallOverrides): Promise<string>;

    emergencyWithdraw(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    feeAddress(overrides?: CallOverrides): Promise<string>;

    getMultiplier(_from: BigNumberish, _to: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolInfo(
      _pid: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accProtonPerShare: BigNumber;
        depositFeeBP: BigNumber;
        harvestInterval: BigNumber;
        isElectronRewards: boolean;
      }
    >;

    massUpdatePools(overrides?: CallOverrides): Promise<void>;

    nftPoolFeeBP(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingProton(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolAddress(overrides?: CallOverrides): Promise<string>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber, boolean] & {
        lpToken: string;
        lpSupply: BigNumber;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accProtonPerShare: BigNumber;
        depositFeeBP: number;
        harvestInterval: BigNumber;
        isElectronRewards: boolean;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    proton(overrides?: CallOverrides): Promise<string>;

    protonPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _isElectronRewards: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDevAddress(_devAddress: string, overrides?: CallOverrides): Promise<void>;

    setFeeAddress(_feeAddress: string, overrides?: CallOverrides): Promise<void>;

    setPoolAddress(_poolAddress: string, overrides?: CallOverrides): Promise<void>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedUpRewards(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    updateEmissionRate(_protonPerBlock: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateNftPoolFeeBP(_nftPoolFeeBP: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updatePool(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewardLockedUp: BigNumber;
        nextHarvestUntil: BigNumber;
      }
    >;

    withdraw(_pid: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Deposit(address,uint256,uint256)'(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
    ): DepositEventFilter;
    Deposit(user?: string | null, pid?: BigNumberish | null, amount?: null): DepositEventFilter;

    'EmergencyWithdraw(address,uint256,uint256)'(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(user?: string | null, pid?: BigNumberish | null, amount?: null): EmergencyWithdrawEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    'RewardLockedUp(address,uint256,uint256)'(
      user?: string | null,
      pid?: BigNumberish | null,
      amountLockedUp?: null,
    ): RewardLockedUpEventFilter;
    RewardLockedUp(user?: string | null, pid?: BigNumberish | null, amountLockedUp?: null): RewardLockedUpEventFilter;

    'UpdateEmissionRate(address,uint256)'(
      user?: string | null,
      protonPerBlock?: BigNumberish | null,
    ): UpdateEmissionRateEventFilter;
    UpdateEmissionRate(user?: string | null, protonPerBlock?: BigNumberish | null): UpdateEmissionRateEventFilter;

    'UpdatedDevAddress(address,address)'(
      previousDevAddress?: string | null,
      newDevAddress?: string | null,
    ): UpdatedDevAddressEventFilter;
    UpdatedDevAddress(previousDevAddress?: string | null, newDevAddress?: string | null): UpdatedDevAddressEventFilter;

    'UpdatedFeeAddress(address,address)'(
      previousFeeAddress?: string | null,
      newFeeAddress?: string | null,
    ): UpdatedFeeAddressEventFilter;
    UpdatedFeeAddress(previousFeeAddress?: string | null, newFeeAddress?: string | null): UpdatedFeeAddressEventFilter;

    'UpdatedNftPoolFeeBP(uint16)'(nftPoolFeeBP?: null): UpdatedNftPoolFeeBPEventFilter;
    UpdatedNftPoolFeeBP(nftPoolFeeBP?: null): UpdatedNftPoolFeeBPEventFilter;

    'UpdatedPoolAddress(address)'(newPoolAddress?: string | null): UpdatedPoolAddressEventFilter;
    UpdatedPoolAddress(newPoolAddress?: string | null): UpdatedPoolAddressEventFilter;

    'Withdraw(address,uint256,uint256)'(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
    ): WithdrawEventFilter;
    Withdraw(user?: string | null, pid?: BigNumberish | null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    BONUS_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    BURN_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    MAXIMUM_DEPOSIT_FEES(overrides?: CallOverrides): Promise<BigNumber>;

    MAXIMUM_HARVEST_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    MAXIMUM_NFTPOOL_MINT_BP(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _isElectronRewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    canHarvest(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    devAddress(overrides?: CallOverrides): Promise<BigNumber>;

    electron(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    feeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getMultiplier(_from: BigNumberish, _to: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolInfo(_pid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    massUpdatePools(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    nftPoolFeeBP(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingProton(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolAddress(overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    proton(overrides?: CallOverrides): Promise<BigNumber>;

    protonPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _isElectronRewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setDevAddress(_devAddress: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setFeeAddress(_feeAddress: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setPoolAddress(
      _poolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedUpRewards(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateEmissionRate(
      _protonPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateNftPoolFeeBP(
      _nftPoolFeeBP: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updatePool(_pid: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    userInfo(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BONUS_MULTIPLIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BURN_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAXIMUM_DEPOSIT_FEES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAXIMUM_HARVEST_INTERVAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAXIMUM_NFTPOOL_MINT_BP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _isElectronRewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    canHarvest(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    devAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    electron(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    feeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMultiplier(_from: BigNumberish, _to: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolInfo(_pid: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    massUpdatePools(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    nftPoolFeeBP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingProton(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proton(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protonPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _isElectronRewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setDevAddress(
      _devAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setFeeAddress(
      _feeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPoolAddress(
      _poolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLockedUpRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateEmissionRate(
      _protonPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateNftPoolFeeBP(
      _nftPoolFeeBP: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    userInfo(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
